#опишем деплоймент с учетом обозначенных требований веб-приложения

apiVersion:  	apps/v1
kind: Deployment
metadata:
  name: app-frontend
spec:
  replicas: 4			# задаем 4 реплики пода для того чтобы справиться с пиковой нагрузкой
  minReadySeconds: 10		# 10 секунд готовности пода для инициализации
  strategy:
    type: RollingUpdate		# выбираем стратегию RollingUpdate, обеспечивающую нулевое время простоя системы при обновлении
    rollingUpdate: 
      maxUnavailable: 0		# максимальное количество недоступных подов при обновлении - 0 под, что обеспечит требуемое количество 4 под;
      maxSurge: 1               # при обновлении в развертывание добавим 1 под, что означает до 5 одновременно запущенных подов в момент начала обновления, и 4 пода когда переход будет осуществляться
				# Данный сценарий обновления можно применять днем для выкатывания срочного обновления, в ночное же время maxUnavailable может быть даже, например 2, а maxSurge может быть установлен в 0 для экономии ресурсов под другие задачи;
  template:
    metadata:
      labels:
        app: app-frontend	#создаваемым репликам будет назначена метка app-frontend, с ними будет работать наш сервис
    spec:
      containers:
        - image: myrepo/appication
          imagePullPolicy: Always
          name: app-frontend
	  resources:
      	    limits:
	      cpu: "1"	   	#установим ограничение на использование CPU в районе 1, что  будет полезно при старте приложения, когда оно потребляет больше ресурсов
	      memory: "128Mi"	#установим лимит памяти на 128 МБ, что по условию достаточно
      	    requests:
	      cpu: "0.1"	#0.1 - потребление CPU приложением при нормальной работе, столько и зарезервируем
	      memory: "128Mi"	#будем резервировать 128 МБ для работы приложения
          ports:
            - containerPort: 443	#443 порт, веб-приложение запущенное на поде будет работать по https, скорее всего.
